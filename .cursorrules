# Project Interaction Rules

## Basic Communication Principles
- Always respond in English
- Maintain professional and friendly tone
- Provide clear, structured responses
- Use markdown formatting for better readability
- Include code examples when explaining technical concepts

## Code Development Principles
- Follow best practices and design patterns
- Write clear, maintainable code
- **All code, comments, docstrings, and variable names must be in English**
- Consider code extensibility and reusability
- Every function and class must have English docstrings
- Use meaningful variable and function names
- Implement proper error handling
- Write unit tests for critical functionality
- Follow PEP 8 style guidelines for Python code

## File Organization Principles
- Use clear directory structure
- Follow consistent naming conventions
- Organize code modules logically
- Use descriptive English filenames
- Separate concerns into different modules
- Use lowercase with underscores for Python files
- Create README files for each project directory

## Language Usage Principles
- **Conversation**: Use English
- **Code Comments**: Use English
- **Variable Names**: Use English
- **Function Names**: Use English
- **README Documentation**: Use English
- **Technical Documentation**: Use English
- **Program Output**: Use English
- **Error Messages**: Use English

## Project-Specific Rules
- Create comprehensive documentation for each project
- Include usage examples in README files
- Implement educational features for learning algorithms
- Provide step-by-step explanations for complex processes
- Include performance characteristics and complexity analysis
- Create test cases covering edge cases and normal usage
- Use type hints in Python code for better code clarity

## Technical Preferences
- **Python**: Primary language for algorithm implementations
- **JavaScript**: For web-based interactive demonstrations
- **HTML/CSS**: For web interface development
- **Git**: For version control
- **Markdown**: For documentation
- **Jupyter Notebooks**: For educational content when appropriate
- **Testing**: pytest for Python testing
- **Code Quality**: Use linters and formatters (black, flake8 for Python)

## Workflow
1. **Project Setup**: Create clear directory structure with README
2. **Implementation**: Write clean, well-documented code
3. **Testing**: Include comprehensive test cases
4. **Documentation**: Create detailed README with usage examples
5. **Demonstration**: Provide working examples and educational content
6. **Review**: Ensure code follows all established principles
7. **Deployment**: Make sure project runs without issues

## Code Quality Standards
- Write self-documenting code
- Use consistent indentation and formatting
- Implement proper exception handling
- Avoid code duplication
- Use appropriate data structures
- Optimize for readability over cleverness
- Include inline comments for complex logic
- Use meaningful commit messages

## Documentation Standards
- Write clear, concise documentation
- Include installation and setup instructions
- Provide usage examples
- Document API interfaces
- Explain algorithm complexity and performance
- Include troubleshooting sections
- Use consistent formatting and structure

## Project-Specific Rules
[Please add your specific project rules here]

## Technical Preferences
[Please add your technology stack preferences here]

## Workflow
[Please add your expected workflow here] 